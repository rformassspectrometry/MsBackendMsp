[{"path":"https://rformassspectrometry.github.io/MsBackendMsp/articles/MsBackendMsp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Description and usage of MsBackendMsp","text":"Spectra package provides central infrastructure handling Mass Spectrometry (MS) data. package supports interchangeable use different backends import MS data variety sources (mzML files). MsBackendMsp package adds support files NIST MSP format frequently used share spectra libraries. vignette illustrates usage MsBackendMsp package can used import export data MSP file format.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/articles/MsBackendMsp.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Description and usage of MsBackendMsp","text":"install package, start R enter: install package eventually missing dependencies.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"MsBackendMsp\")"},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/articles/MsBackendMsp.html","id":"importing-msms-data-from-msp-files","dir":"Articles","previous_headings":"","what":"Importing MS/MS data from MSP files","title":"Description and usage of MsBackendMsp","text":"MSP file format allows store MS/MS spectra (m/z intensity mass peaks) along additional annotations spectrum. single MSP file can thus contain single multiple spectra. load package define file name MSP file distributed package. next import data Spectra object specifying constructor function backend class can used read data (case MsBackendMsp). now full access imported spectra variables can listed spectraVariables function. Besides default spectra variables, msLevel, rtime, precursorMz, also additional spectra variables name adduct additional data fields MSP file. NIST file format however loosely defined variety flavors (dialects) exist define data fields use different names fields. MsBackendMsp supports data import/export MSP format variations defining providing different mappings MSP data fields spectra variables. Also user-defined mappings can used, makes import MSP flavor possible. Pre-defined mappings MSP data fields spectra variables (.e. variables within Spectra object) returned spectraVariableMapping function. names character vector represent spectra variable names values vector MSP data fields. Note default, also data fields mapping provided imported (field name used spectra variable name). default mapping works well MSP files NIST tools MS-DIAL. MassBank North America MoNA however, uses slightly different format. read first 6 lines MSP file MoNA. first 6 lines NIST MSP file: MSP files MoNA flavor use slightly different field names, also upper case, also additional fields defined. possible import MoNA flavored MSP files using default variable mapping used , spectra variables however mapped correctly respective spectra variable resulting Spectra object (e.g. precursor m/z available expected spectra variable $precursorMz). spectraVariableMapping provides however also mapping MSP files MoNA flavor. Using mapping data import ensure fields get correctly mapped. Note addition predefined variable mappings, also possible provide user-defined variable mapping mapping parameter thus enabling import MSP files highly customized format. Multiple values certain spectrum represented duplicated fields MSP file. MsBackendMsp supports also import data. MoNA MSP files use example multiple \"Synon\" fields list synonyms compound. extract values two spectra within Spectra object MoNA. addition importing data MSP files, MsBackendMsp allows also export Spectra files MSP format. export example Spectra data MoNA temporary file, using default NIST MSP format. export Spectra data NIST MSP format MSP file MoNA flavor. Thus, also used convert MSP files different flavors.","code":"library(MsBackendMsp)  nist <- system.file(\"extdata\", \"spectrum2.msp\", package = \"MsBackendMsp\") sp <- Spectra(nist, source = MsBackendMsp()) ## Start data import from 1 files ... ## Warning in asMethod(object): NAs introduced by coercion ## done spectraVariables(sp) ##  [1] \"msLevel\"                 \"rtime\"                   ##  [3] \"acquisitionNum\"          \"scanIndex\"               ##  [5] \"dataStorage\"             \"dataOrigin\"              ##  [7] \"centroided\"              \"smoothed\"                ##  [9] \"polarity\"                \"precScanNum\"             ## [11] \"precursorMz\"             \"precursorIntensity\"      ## [13] \"precursorCharge\"         \"collisionEnergy\"         ## [15] \"isolationWindowLowerMz\"  \"isolationWindowTargetMz\" ## [17] \"isolationWindowUpperMz\"  \"name\"                    ## [19] \"adduct\"                  \"INSTRUMENTTYPE\"          ## [21] \"instrument\"              \"smiles\"                  ## [23] \"inchikey\"                \"inchi\"                   ## [25] \"formula\"                 \"PUBCHEMID\"               ## [27] \"SOURCE\"                  \"COMMENT\"                 ## [29] \"Num.Peaks\" sp$msLevel ## [1] 2 2 sp$name ## [1] \"3-Hydroxy-3-(2-(2-hydroxyphenyl)-2-oxoethyl)-1,3-dihydro-2H-indol-2-one\" ## [2] \"5-(4-Ethoxybenzylidene)-2-(4-morpholinyl)-1,3-thiazol-4(5H)-one\" sp$adduct ## [1] \"[M+H]+\" \"[M+H]+\" spectraVariableMapping(MsBackendMsp()) ##            name       accession         formula        inchikey          adduct  ##          \"NAME\"           \"DB#\"       \"FORMULA\"      \"INCHIKEY\" \"PRECURSORTYPE\"  ##       exactmass           rtime     precursorMz          adduct          smiles  ##     \"EXACTMASS\" \"RETENTIONTIME\"   \"PRECURSORMZ\" \"PRECURSORTYPE\"        \"SMILES\"  ##           inchi        polarity      instrument  ##         \"INCHI\"       \"IONMODE\"    \"INSTRUMENT\" mona <- system.file(\"extdata\", \"minimona.msp\", package = \"MsBackendMsp\") head(readLines(mona)) ## [1] \"Name: Ritonavir\"                       ## [2] \"Synon: $:00in-source\"                  ## [3] \"DB#: MoNA000010\"                       ## [4] \"InChIKey: NCDNCNXCDXHOMX-XGKFQTDJSA-N\" ## [5] \"Instrument_type: Waters Synapt G2\"     ## [6] \"Formula: C37H48N6O5S2\" head(readLines(nist)) ## [1] \"NAME: 3-Hydroxy-3-(2-(2-hydroxyphenyl)-2-oxoethyl)-1,3-dihydro-2H-indol-2-one\" ## [2] \"PRECURSORMZ: 284.0917\"                                                         ## [3] \"PRECURSORTYPE: [M+H]+\"                                                         ## [4] \"INSTRUMENTTYPE: IT/ion trap\"                                                   ## [5] \"INSTRUMENT: Thermo Finnigan LCQ Deca\"                                          ## [6] \"SMILES: NA\" spectraVariableMapping(MsBackendMsp(), \"mona\") ##                  name               synonym             accession  ##                \"Name\"               \"Synon\"                 \"DB#\"  ##              inchikey                adduct           precursorMz  ##            \"InChIKey\"      \"Precursor_type\"         \"PrecursorMZ\"  ##              polarity               formula             exactmass  ##            \"Ion_mode\"             \"Formula\"           \"ExactMass\"  ## collision_energy_text               msLevel  ##    \"Collision_energy\"       \"Spectrum_type\" sp_mona <- Spectra(mona, source = MsBackendMsp(),                    mapping = spectraVariableMapping(MsBackendMsp(), \"mona\")) ## Start data import from 1 files ... done sp_mona$precursorMz ##  [1]       NA 189.1603 265.1188 265.1188 263.1031 263.1031 229.1552 312.1302 ##  [9] 525.4990 525.4990 525.4990 525.4990 525.4990 525.4990 525.4990 525.4990 ## [17] 525.4990 525.4990 525.4990 525.4990 539.5146 539.5146 539.5146 539.5146 ## [25] 539.5146 539.5146 539.5146 539.5146 539.5146 539.5146 sp_mona[29:30]$synonym ## [[1]] ## [1] \"$:00 ms2\"                \"$:05 30V CID\"            ## [3] \"$:07 In-Silico-Spectrum\" \"$:00in-source\"           ##  ## [[2]] ## [1] \"$:00 ms2\"                \"$:05 30V CID\"            ## [3] \"$:07 In-Silico-Spectrum\" \"$:00in-source\" tmpf <- tempfile()  export(sp_mona, backend = MsBackendMsp(), file = tmpf,        mapping = spectraVariableMapping(MsBackendMsp())) head(readLines(tmpf)) ## [1] \"NAME: Ritonavir\"                       ## [2] \"msLevel: MS2\"                          ## [3] \"synonym: $:00in-source\"                ## [4] \"DB#: MoNA000010\"                       ## [5] \"INCHIKEY: NCDNCNXCDXHOMX-XGKFQTDJSA-N\" ## [6] \"Instrument_type: Waters Synapt G2\" tmpf <- tempfile()  export(sp, backend = MsBackendMsp(), file = tmpf,        mapping = spectraVariableMapping(MsBackendMsp(), \"mona\")) head(readLines(tmpf)) ## [1] \"Name: 3-Hydroxy-3-(2-(2-hydroxyphenyl)-2-oxoethyl)-1,3-dihydro-2H-indol-2-one\" ## [2] \"Spectrum_type: MS2\"                                                            ## [3] \"Ion_mode: Positive\"                                                            ## [4] \"PrecursorMZ: 284.0917\"                                                         ## [5] \"Precursor_type: [M+H]+\"                                                        ## [6] \"INSTRUMENTTYPE: IT/ion trap\""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/articles/MsBackendMsp.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Description and usage of MsBackendMsp","text":"","code":"sessionInfo() ## R Under development (unstable) (2022-01-29 r81593) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ##  ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ## [1] MsBackendMsp_0.99.0  Spectra_1.5.8        ProtGenerics_1.27.2  ## [4] BiocParallel_1.29.12 S4Vectors_0.33.10    BiocGenerics_0.41.2  ## [7] BiocStyle_2.23.1     ##  ## loaded via a namespace (and not attached): ##  [1] bslib_0.3.1         compiler_4.2.0      BiocManager_1.30.16 ##  [4] jquerylib_0.1.4     tools_4.2.0         digest_0.6.29       ##  [7] clue_0.3-60         jsonlite_1.7.3      evaluate_0.14       ## [10] memoise_2.0.1       rlang_1.0.1         cli_3.1.1           ## [13] yaml_2.2.2          parallel_4.2.0      pkgdown_2.0.2.9000  ## [16] xfun_0.29           fastmap_1.1.0       cluster_2.1.2       ## [19] stringr_1.4.0       knitr_1.37          desc_1.4.0          ## [22] fs_1.5.2            sass_0.4.0          systemfonts_1.0.3   ## [25] IRanges_2.29.1      MsCoreUtils_1.7.1   rprojroot_2.0.2     ## [28] R6_2.5.1            textshaping_0.3.6   rmarkdown_2.11      ## [31] bookdown_0.24       purrr_0.3.4         magrittr_2.0.2      ## [34] htmltools_0.5.2     MASS_7.3-55         ragg_1.2.1          ## [37] stringi_1.7.6       cachem_1.0.6        crayon_1.4.2"},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neumann Steffen. Author. Johannes Rainer. Author, maintainer. Michael Witting. Contributor.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Steffen N, Rainer J (2022). MsBackendMsp: Mass Spectrometry Data Backend NIST msp Files. R package version 0.99.0, https://github.com/RforMassSpectrometry/MsBackendMsp.","code":"@Manual{,   title = {MsBackendMsp: Mass Spectrometry Data Backend for NIST msp Files},   author = {Neumann Steffen and Johannes Rainer},   year = {2022},   note = {R package version 0.99.0},   url = {https://github.com/RforMassSpectrometry/MsBackendMsp}, }"},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/index.html","id":"mass-spectrometry-data-backend-for-nist-msp-files","dir":"","previous_headings":"","what":"Mass Spectrometry Data Backend for NIST msp Files","title":"Mass Spectrometry Data Backend for NIST msp Files","text":"MsBackendMsp package provides functionality import handle MS/MS spectrum data MSP files. package defines MsBackendMsp backend can used import use MS2 spectrum data msp files Spectra R package. information see package vignette package homepage.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/MsBackendMsp.html","id":null,"dir":"Reference","previous_headings":"","what":"MS data backend for msp files — MsBackendMsp","title":"MS data backend for msp files — MsBackendMsp","text":"MsBackendMsp class supports import MS/MS spectra data files NIST MSP file format. MsBackendMsp extends MsBackendDataFrame() backend directly supports thus applyProcessing() function make data manipulations persistent. New objects created MsBackendMsp function. backendInitialize method subsequently called initialize object import MS/MS data (one ) msp files. MsBackendMsp backend provides export method allows export data Spectra object (parameter x) file msp format. Parameters function : x: Spectra object exported. file: character(1) desired file name. mapping: named character providing mapping spectra variables MSP data fields. Defaults mapping = spectraVariableMapping(MsBackendMsp()). allVariables: logical(1) whether spectra variables x exported defined mapping. exportName: logical(1) whether NAME field always exported even provided x. See package vignette details examples. spectraVariableMapping function allows provide mapping spectra variable names (.e. names used spectra variables Spectra() object) data field names MSP file. Parameter format allows select pre-defined mappings. Currently supported mapping flavors : format = \"msp\": default MSP field names. work standard NIST MSP files MSP files exported MS-DIAL. format = \"mona\": MSP file format MoNA including LipidBlast.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/MsBackendMsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MS data backend for msp files — MsBackendMsp","text":"","code":"# S4 method for MsBackendMsp backendInitialize(   object,   file,   mapping = spectraVariableMapping(object),   ...,   BPPARAM = bpparam() )  MsBackendMsp()  # S4 method for MsBackendMsp spectraVariableMapping(object, format = c(\"msp\", \"mona\"))  # S4 method for MsBackendMsp export(   object,   x,   file = tempfile(),   mapping = spectraVariableMapping(MsBackendMsp()),   allVariables = TRUE,   exportName = TRUE,   ... )"},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/MsBackendMsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MS data backend for msp files — MsBackendMsp","text":"object Instance MsBackendMsp class. file character (full) file name(s) msp file(s) MS/MS data imported exported. mapping named character vector rename MSP fields spectra variables (see spectraVariableMapping()). allows correctly import also custom fields data files different MSP flavors. ... Currently ignored. BPPARAM Parameter object defining parallel processing setup import data parallel. Defaults BPPARAM = bpparam(). See bpparam() information. format spectraVariableMapping: character(1) specifying MSP flavour mapping returned. Currently supported : format = \"msp\" (generic MSP format, example MS-DIAL MSP files) format = \"mona\" (MSP files MoNA flavour). x export: Spectra() object exported specified MSP file. allVariables logical(1) whether spectra variables x exported defined mapping. exportName logical(1) whether NAME field always exported even provided x.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/MsBackendMsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MS data backend for msp files — MsBackendMsp","text":"MsBackendMsp backendInitialize return instance MsBackendMsp class. spectraVariableMapping named charactervector mapping spectra variables MSP data fields.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/MsBackendMsp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MS data backend for msp files — MsBackendMsp","text":"Steffen Neumann, Michael Witting, Laurent Gatto Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/MsBackendMsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MS data backend for msp files — MsBackendMsp","text":"","code":"## Import spectra from a MSP file from LipidBlast f <- system.file(\"extdata\", \"small-export-LipidBlast.msp\",     package = \"MsBackendMsp\") be <- backendInitialize(MsBackendMsp(), f) #> Start data import from 1 files ...  #> done be #> MsBackendMsp with 5 spectra #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1         2        NA        NA #> 2         2        NA        NA #> 3         2        NA        NA #> 4         2        NA        NA #> 5         2        NA        NA #>  ... 32 more variables/columns.  be$msLevel #> [1] 2 2 2 2 2 be$intensity #> NumericList of length 5 #> [[1]] 80.08008 100 #> [[2]] 80.08008 100 #> [[3]] 80.08008 100 #> [[4]] 30.03003 50.05005 50.05005 50.05005 ... 70.07007 50.05005 50.05005 100 #> [[5]] 30.03003 50.05005 50.05005 50.05005 ... 70.07007 50.05005 50.05005 100 be$mz #> NumericList of length 5 #> [[1]] 85.02841 232.1543 #> [[2]] 85.02841 246.17 #> [[3]] 85.02841 260.1856 #> [[4]] 152.9958 227.2016 283.2643 327.2329 ... 691.4344 703.5283 1451.996 #> [[5]] 152.9958 253.2173 255.233 281.2486 ... 673.4814 721.4814 1451.996  ## precursor m/z are however all missing be$precursorMz #> [1] NA NA NA NA NA  ## Default spectra variable mapping spectraVariableMapping(MsBackendMsp()) #>            name       accession         formula        inchikey          adduct  #>          \"NAME\"           \"DB#\"       \"FORMULA\"      \"INCHIKEY\" \"PRECURSORTYPE\"  #>       exactmass           rtime     precursorMz          adduct          smiles  #>     \"EXACTMASS\" \"RETENTIONTIME\"   \"PRECURSORMZ\" \"PRECURSORTYPE\"        \"SMILES\"  #>           inchi        polarity      instrument  #>         \"INCHI\"       \"IONMODE\"    \"INSTRUMENT\"   ## In fact, to read MSP files in \"LipidBlast flavour\" (same as MoNA) we ## should use a different spectra variable mapping spectraVariableMapping(MsBackendMsp(), \"mona\") #>                  name               synonym             accession  #>                \"Name\"               \"Synon\"                 \"DB#\"  #>              inchikey                adduct           precursorMz  #>            \"InChIKey\"      \"Precursor_type\"         \"PrecursorMZ\"  #>              polarity               formula             exactmass  #>            \"Ion_mode\"             \"Formula\"           \"ExactMass\"  #> collision_energy_text               msLevel  #>    \"Collision_energy\"       \"Spectrum_type\"   ## Importing the data with this will correctly retrieve data be <- backendInitialize(MsBackendMsp(), f,     mapping = spectraVariableMapping(MsBackendMsp(), \"mona\")) #> Start data import from 1 files ...  #> done be$precursorMz #> [1]  232.1543  246.1700  260.1856 1451.9962 1451.9962  ## Other fields are also correctly mapped, but might need to be converted ## to e.g. numeric, such as \"exactmass\" be$exactmass #> [1] \"232.1543346040907\"  \"246.16998466809073\" \"260.18563473209076\" #> [4] \"1453.003526472\"     \"1453.003526472\"      be$exactmass <- as.numeric(be$exactmass)  be$adduct #> [1] \"[M]+\"   \"[M]+\"   \"[M]+\"   \"[M-H]-\" \"[M-H]-\" be$formula #> [1] \"[C11H22NO4]+\" \"[C12H24NO4]+\" \"[C13H26NO4]+\" \"C81H146O17P2\" \"C81H146O17P2\"  ## Exporting Spectra objects in MSP format.  sps <- Spectra(be) export(MsBackendMsp(), sps, file = stdout()) #> NAME: ACar 4:0 #> msLevel: MS2 #> IONMODE: Positive #> PRECURSORMZ: 232.15433 #> Comments: \"SMILES=CCCC(=O)OC(CC(O)=O)C[N+](C)(C)C\" \"compound class=ACar\" \"computed SMILES=O=C(O)CC(OC(=O)CCC)C[N+](C)(C)C\" \"computed InChI=InChI=1S/C11H21NO4/c1-5-6-11(15)16-9(7-10(13)14)8-12(2,3)4/h9H,5-8H2,1-4H3/p+1\" \"retention time=0.51\" \"collision energy spread=15 V\" \"author=Tobias Kind, Hiroshi Tsugawa\" \"computed mass accuracy=2.3431646471704717\" \"computed mass error=5.439758187435473E-4\" \"SPLASH=splash10-001r-7090000000-aa12589a2481560ea0d5\" \"submitter=Tobias Kind (University of California, Davis)\" \"MoNA Rating=3.6363636363636367\" #> Instrument: SCIEX 5600 #> Instrument_type: in-silico QTOF #> MW: 232 #> Num.Peaks: 2 #> DB#: LipidBlast000001 #> PRECURSORTYPE: [M]+ #> collision_energy_text: 45 V #> EXACTMASS: 232.154334604091 #> FORMULA: [C11H22NO4]+ #> INCHIKEY: QWYFHHGCZUCMBN-UHFFFAOYSA-O #> synonym: [M]+ #> synonym: $:00in-source #> Num Peaks: 2 #> 85.02841 80.08008 #> 232.1543 100 #>  #> NAME: ACar 5:0 #> msLevel: MS2 #> IONMODE: Positive #> PRECURSORMZ: 246.16998 #> Comments: \"SMILES=CCCCC(=O)OC(CC(O)=O)C[N+](C)(C)C\" \"compound class=ACar\" \"computed SMILES=O=C(O)CC(OC(=O)CCCC)C[N+](C)(C)C\" \"computed InChI=InChI=1S/C12H23NO4/c1-5-6-7-12(16)17-10(8-11(14)15)9-13(2,3)4/h10H,5-9H2,1-4H3/p+1\" \"retention time=0.68\" \"collision energy spread=15 V\" \"author=Tobias Kind, Hiroshi Tsugawa\" \"computed mass accuracy=2.209496944908765\" \"computed mass error=5.439118187382519E-4\" \"SPLASH=splash10-000b-7090000000-2b596f4df94dfefba50b\" \"submitter=Tobias Kind (University of California, Davis)\" \"MoNA Rating=3.6363636363636367\" #> Instrument: SCIEX 5600 #> Instrument_type: in-silico QTOF #> MW: 246 #> Num.Peaks: 2 #> DB#: LipidBlast000002 #> PRECURSORTYPE: [M]+ #> collision_energy_text: 45 V #> EXACTMASS: 246.169984668091 #> FORMULA: [C12H24NO4]+ #> INCHIKEY: VSNFQQXVMPSASB-UHFFFAOYSA-O #> synonym: [M]+ #> synonym: $:00in-source #> Num Peaks: 2 #> 85.02841 80.08008 #> 246.17 100 #>  #> NAME: ACar 6:0 #> msLevel: MS2 #> IONMODE: Positive #> PRECURSORMZ: 260.18563 #> Comments: \"SMILES=CCCCCC(=O)OC(CC(O)=O)C[N+](C)(C)C\" \"compound class=ACar\" \"computed SMILES=O=C(O)CC(OC(=O)CCCCC)C[N+](C)(C)C\" \"computed InChI=InChI=1S/C13H25NO4/c1-5-6-7-8-13(17)18-11(9-12(15)16)10-14(2,3)4/h11H,5-10H2,1-4H3/p+1\" \"retention time=0.86\" \"collision energy spread=15 V\" \"author=Tobias Kind, Hiroshi Tsugawa\" \"computed mass accuracy=2.0902300356715053\" \"computed mass error=5.438478186761131E-4\" \"SPLASH=splash10-03dr-7090000000-a9ec485bc43949b4b278\" \"submitter=Tobias Kind (University of California, Davis)\" \"MoNA Rating=3.6363636363636367\" #> Instrument: SCIEX 5600 #> Instrument_type: in-silico QTOF #> MW: 260 #> Num.Peaks: 2 #> DB#: LipidBlast000003 #> PRECURSORTYPE: [M]+ #> collision_energy_text: 45 V #> EXACTMASS: 260.185634732091 #> FORMULA: [C13H26NO4]+ #> INCHIKEY: VVPRQWTYSNDTEA-UHFFFAOYSA-O #> synonym: [M]+ #> synonym: $:00in-source #> Num Peaks: 2 #> 85.02841 80.08008 #> 260.1856 100 #>  #> NAME: CL 72:6 #> msLevel: MS2 #> IONMODE: Negative #> PRECURSORMZ: 1451.99625 #> Comments: \"SMILES=CCCCCCCCCCCCCCCCCC(=O)OCC(COP(O)(=O)OCC(O)COP(O)(=O)OCC(COC(=O)CC\\C=C/C\\C=C/C\\C=C/C\\C=C/C\\C=C/C\\C=C/CC)OC(=O)CCCCCCCCCCCCC)OC(=O)CCCCCCCCCCCCCCCCC\" \"compound class=CL\" \"computed SMILES=O=C(OCC(OC(=O)CCCCCCCCCCCCC)COP(=O)(O)OCC(O)COP(=O)(O)OCC(OC(=O)CCCCCCCCCCCCCCCCC)COC(=O)CCCCCCCCCCCCCCCCC)CCC=CCC=CCC=CCC=CCC=CCC=CCC\" \"computed InChI=InChI=1S/C81H146O17P2/c1-5-9-13-17-21-25-29-32-35-36-37-38-41-43-47-50-54-58-62-66-79(84)91-71-76(97-80(85)67-63-59-55-51-45-28-24-20-16-12-8-4)73-95-99(87,88)93-69-75(82)70-94-100(89,90)96-74-77(98-81(86)68-64-60-56-52-48-44-40-34-31-27-23-19-15-11-7-3)72-92-78(83)65-61-57-53-49-46-42-39-33-30-26-22-18-14-10-6-2/h9,13,21,25,32,35,37-38,43,47,54,58,75-77,82H,5-8,10-12,14-20,22-24,26-31,33-34,36,39-42,44-46,48-53,55-57,59-74H2,1-4H3,(H,87,88)(H,89,90)/b13-9-,25-21-,35-32-,38-37-,47-43-,58-54-\" \"retention time=11.91\" \"collision energy spread=15 V\" \"author=Tobias Kind, Hiroshi Tsugawa\" \"computed mass accuracy=3.2506971738511424E-4\" \"computed mass error=-4.720000106317457E-7\" \"SPLASH=splash10-0w4i-0134901100-d27b9577a1230ec65177\" \"submitter=Tobias Kind (University of California, Davis)\" \"MoNA Rating=4.5\" #> Instrument: SCIEX 5600 #> Instrument_type: in-silico QTOF #> MW: 1453 #> Num.Peaks: 10 #> DB#: LipidBlast395475 #> PRECURSORTYPE: [M-H]- #> collision_energy_text: 45 V #> EXACTMASS: 1453.003526472 #> FORMULA: C81H146O17P2 #> INCHIKEY: KWABUIIFXPUAEH-OXNFOSRESA-N #> synonym: CL 14:0-22:6-18:0-18:0 #> synonym: $:00in-source #> Num Peaks: 10 #> 152.9958 30.03003 #> 227.2016 50.05005 #> 283.2643 50.05005 #> 327.2329 50.05005 #> 363.1942 70.07007 #> 419.2568 70.07007 #> 463.2255 70.07007 #> 691.4344 50.05005 #> 703.5283 50.05005 #> 1451.996 100 #>  #> NAME: CL 72:6 #> msLevel: MS2 #> IONMODE: Negative #> PRECURSORMZ: 1451.99625 #> Comments: \"SMILES=CCCCCCCCCCCCCCCC(=O)OC(COC(=O)CCCCCCC\\C=C/CCCCCCCC)COP(O)(=O)OCC(O)COP(O)(=O)OCC(COC(=O)CCCCCCCC\\C=C/C\\C=C/C\\C=C/C\\C=C/CC)OC(=O)CCCCCCC\\C=C/CCCCCC\" \"compound class=CL\" \"computed SMILES=O=C(OCC(OC(=O)CCCCCCCCCCCCCCC)COP(=O)(O)OCC(O)COP(=O)(O)OCC(OC(=O)CCCCCCCC=CCCCCCC)COC(=O)CCCCCCCCC=CCC=CCC=CCC=CCC)CCCCCCCC=CCCCCCCCC\" \"computed InChI=InChI=1S/C81H146O17P2/c1-5-9-13-17-21-25-29-33-35-36-37-38-40-44-46-50-54-58-62-66-79(84)92-72-77(98-81(86)68-64-60-56-52-48-42-32-28-24-20-16-12-8-4)74-96-100(89,90)94-70-75(82)69-93-99(87,88)95-73-76(97-80(85)67-63-59-55-51-47-41-31-27-23-19-15-11-7-3)71-91-78(83)65-61-57-53-49-45-43-39-34-30-26-22-18-14-10-6-2/h9,13,21,25,28,32-35,37-39,75-77,82H,5-8,10-12,14-20,22-24,26-27,29-31,36,40-74H2,1-4H3,(H,87,88)(H,89,90)/b13-9-,25-21-,32-28-,35-33-,38-37-,39-34-\" \"retention time=11.65\" \"collision energy spread=15 V\" \"author=Tobias Kind, Hiroshi Tsugawa\" \"computed mass accuracy=3.2506971738511424E-4\" \"computed mass error=-4.720000106317457E-7\" \"SPLASH=splash10-0uyi-0157901100-d3b7dfa9dd7050026484\" \"submitter=Tobias Kind (University of California, Davis)\" \"MoNA Rating=4.5\" #> Instrument: SCIEX 5600 #> Instrument_type: in-silico QTOF #> MW: 1453 #> Num.Peaks: 12 #> DB#: LipidBlast398514 #> PRECURSORTYPE: [M-H]- #> collision_energy_text: 45 V #> EXACTMASS: 1453.003526472 #> FORMULA: C81H146O17P2 #> INCHIKEY: WINXBODRGKNJDS-DUULZMMUSA-N #> synonym: CL 16:0-18:1-16:1-22:4 #> synonym: $:00in-source #> Num Peaks: 12 #> 152.9958 30.03003 #> 253.2173 50.05005 #> 255.233 50.05005 #> 281.2486 50.05005 #> 331.2643 50.05005 #> 389.2098 70.07007 #> 391.2255 70.07007 #> 417.2411 70.07007 #> 467.2568 70.07007 #> 673.4814 50.05005 #> 721.4814 50.05005 #> 1451.996 100 #>"},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/hidden_aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal page for hidden aliases — hidden_aliases","title":"Internal page for hidden aliases — hidden_aliases","text":"S4 methods require documentation entry clutter index.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/readMsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","title":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","text":"Reading MSP files readMsp function imports data file MGF format reading specified fields returning data DataFrame().","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/readMsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","text":"","code":"readMsp(f, msLevel = 2L, mapping = spectraVariableMapping(MsBackendMsp()), ...)"},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/readMsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","text":"f character(1) path MSP file. msLevel numeric(1) MS level. Default 2. value reported spectra's MS level unless source MSP file defines MS level. mapping named character vector rename MSP fields spectra variables (see spectraVariableMapping()). allows correctly import also custom fields data files different MSP flavors. ... Additional parameters, currently ignored.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/readMsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","text":"DataFrame row containing data one spectrum MSP file. m/z intensity values available columns \"mz\"\"intensity\" list representation.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/readMsp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","text":"Laurent Gatto, Steffen Neumann, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/reference/readMsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading MSP files\n\nThe readMsp function imports the data from a file in MGF format reading\nall specified fields and returning the data as a DataFrame(). — readMsp","text":"","code":"fls <- dir(system.file(\"extdata\", package = \"MsBackendMsp\"),     full.names = TRUE, pattern = \"msp$\")[1L]  readMsp(fls) #> DataFrame with 1 row and 20 columns #>   Collision_energy               Comments         ExactMass      Formula #>        <character>            <character>       <character>  <character> #> 1             45 V \"SMILES=CCCC(=O)OC(C.. 232.1543346040907 [C11H22NO4]+ #>                 InChIKey  Instrument Instrument_type    Ion_mode          MW #>              <character> <character>     <character> <character> <character> #> 1 QWYFHHGCZUCMBN-UHFFF..  SCIEX 5600  in-silico QTOF           P         232 #>          Name   Num.Peaks PrecursorMZ Precursor_type Spectrum_type #>   <character> <character> <character>    <character>   <character> #> 1    ACar 4:0           2   232.15433           [M]+           MS2 #>          accession              Synon                mz         intensity #>        <character>             <list>     <NumericList>     <NumericList> #> 1 LipidBlast000001 [M]+,$:00in-source  85.0284,232.1543  80.0801,100.0000 #>               dataOrigin   msLevel #>              <character> <integer> #> 1 /__w/_temp/Library/M..         2"},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/news/index.html","id":"changes-in-0-98","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.2","title":"MsBackendMsp 0.98","text":"Vignette added.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/news/index.html","id":"changes-in-0-98-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.1","title":"MsBackendMsp 0.98","text":"Improve export method support multi-value fields user-provided mappings.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/news/index.html","id":"changes-in-0-98-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.0","title":"MsBackendMsp 0.98","text":"Add additional spectra variable mappings. Call unit tests Spectra package.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/news/index.html","id":"changes-in-0-0","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.5","title":"MsBackendMsp 0.0","text":"Add possibility define mapping spectra variables MSP data fields. Support duplicated data fields single MSP entry.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendMsp/news/index.html","id":"changes-in-0-0-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.4","title":"MsBackendMsp 0.0","text":"Fix tests match new columns MSP parsing Start using Spectra generic tests","code":""}]
